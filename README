Installation
	required:
		python-gnuplot
		oprofile

	1. copy the wrstat directory to your Installation path 
	2. link wrstat-run to e.g. /usr/local/bin
	3. modify the wrstat.config

	Recompiling the kernel:
		apt-get install ncurses-dev kernel-package
		make menuconfig
		[ kernel configuration ]
		fakeroot make-kpkg --initrd --revision=1.0 kernel_image
		dpkg -i ...
		grub-install /dev/vda ( optional?)
		reboot

Running tests:
	To run a test program run:

	wrstat-run path/to/test/directory program arg1 arg2 ...

	While running a test, wrstat-sampling-deamon.py will invoke several
	modules to collect data of different type. The modules to run are
	specified in wrstat.config.

	Implemented modules:
		stat:		Handles /proc/stat
		iostat:		Disk I/O throughput
		lock_stat:	Handles /proc/lock_stat
		oprofile:	Wrapper and visualization for oprofile
		diskstats:	Handles /proc/diskstats ( deprecated)

	After the test program finished, the collected data will be parsed
	by wrstart-parser.py and exported. This data will then be graphed
	by wrstat-graph.py

Test directory:
	This directory contains all test data and results including graphs.
	If the test direcotry does not exists it will be created,
	otherwise the results will been overwritten.

	Directory structure:
		Base testdir structure
			wrstat.config	
				snapshot of wrstat.config took at the beginning
				of a test run.
				This file can be used by any modules to store
				additional configuration parameters.
			cmd
				the actual command that was evaluated
			output
				stdout and stderr of cmd
			samples.pickle
				parsed data of all modules. this file is created by 
				wrstat-parser.py which will call the parse() method
				of the requested modules.
				This file can be loaded by python ( using python pickle)
				which contains one dictionary, that maps the modulename
				to the data returned by parse()
			samples/
				directory that will be used for all modules to store raw
				samples, which are created by presampling(), sample()
				or postsampling() method
			*.svg
				multiple graphs generated by wrstat-graph, that calls
				plot() of each required module.

Modules:
	There is one module for each class of graphs e.g. /proc/lock_stat
	or oprofile, that provide the actual functionality.

	Each module is a python script containing the following methods:

		def presampling( test_dir):
			This method is called once at the beginning of a test.
			It is usually used for initialization

		def sample( test_dir, t):
			This method is called with the specified intervall
			and is used to take samples for any kind of time series
			data. To mitigate lag problems this function will be called
			as a new thread ( unblocking call) to ensure
			stable sampling. t is the number of the current sample.

		def postsampling( test_dir):
			This method is called once the test is finished.
			It can by used for any kind	
			of deinitialization or postprocessing.

		def parse( test_dir):
			This method will be called by wrstat-parser.py
			and will parse and return the data captured by presampling,
			sample or postsampling. There are no restrictions on the
			data structure.
			
		def plot( test_dir, data, intervall):
			This method will be called by wrstat-graph and will create
			all needed graphs. The provided data was previously created by parse().

	To make a module usable by wrstat, copy the script to this directory and
	add the module name to wrstat.config. The modulename is the name of
	the file without extension.

Implemented Modules:
	TODO datastrucure
	TODO module review
	stat
		This module will take samples of /proc/stat

	oprofile
		Created files:
			samples/oprofile
				Default output of opreport
			TODO graphs

		oprofile-init.sh test_directory
			This script will initialize oprofile for the specified test directory
			and will be called by oprofile.py presampling()

		oprofile-deinit.sh
			This script will deinitialize oprofile and write the default opreport
			output to samples/oprofile

		oprofile.py
			The actual modules used by this tool

	lock_stat


	stat

	iostat


	diskstats
