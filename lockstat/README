Installation
	required:
		python-gnuplot
		oprofile

	1. copy the lockstat directory to your Installation path 
	2. link lockstat-run to e.g. /usr/local/bin
	3. modify the lockstat/lockstat.config

	Recompiling the kernel:
		dpkg -i
		grub-install /dev/vda ( optional?)
		reboot

Running tests:
	lockstat-run path/to/test/directory program arg1 arg2 ...

	While running a test, lockstat-sampling-deamon.py will create snapshots of all /proc files,
	given in lockstat.config at the given sample rate. If some files, does not exists,
	they will be ignored.
	After the program finished, the /proc files are parsed by lockstat.parser.py and dumped
	to samples.pickle, which is finally graphed by lockstat-graph.py

Test directory:
	This directory contains all test data and results including graphs.
	If the test direcotry does not exists it will be created,
	otherwise the results will been overwritten.

	Directory structure:
		Base testdir structure
			lockstat.config	
				snapshot of the lockstat.configf file took at the beginning
				of a test run. This file can be used by any modules to store
				configuration.
			cmd
				the actual command given to lockstat_run, that was evaluated
				during this test.
			output
				stdout and stderr of cmd
			samples.pickle
				parsed samples of all modules. this file is created by lockstat-parser
				which will call the parse() method the required modules.
				This file can be loaded by python ( using the pickle module) which
				contains one dictionary, that maps the modulename to the data
				returned by parse
			samples/
				directory that will be used for all modules to store raw samples which,
				which are created by presampling(), sample() or postsampling() method
			*.svg
				multiple graphs generated by lockstat-graph, that calls the
				plot() method of each required module.

Modules:
	There is one module for each class of graphs e.g. /proc/lock_stat or oprofile,
	that provide the actual functionality.

	Each module is a python script containing the following methods:
		def presampling( test_dir):
			This method is called once at the beginning of a test.
			It is usually used for initialization

		def sample( test_dir, t):
			This method is called with the specified sampling rate and is used
			to take samples for any kind of time series data. To mitigate lag problems
			this function will be called as a new thread ( unblocking call) to ensure
			stable sampling. t is the number of the current sample.

		def postsampling( test_dir):
			This method is called once the test is finished. It can by used for any kind
			of deinitialization or postprocessing.

		def parse( test_dir):
			This method will be called by lockstat-parse and will parse and return
			the data captured by presampling, sample or postsampling. There are no
			restrictions on the data structure.
			
		def plot( test_dir, data, sample_rate):
			This method will be called by lockstat-graph and will create all needed graphs.
			the provided data was previously created by parse().

	To make a module useable by this tool simply copy the script to this directory and
	add the module name to the config file. The modulename is the name of the file without
	the .py extension.

Implemented Modules:
	TODO datastrucure
	TODO module review
	stat
		This module will take samples of /proc/stat

	oprofile
		Created files:
			samples/oprofile
				Default output of opreport
			TODO graphs

		oprofile-init.sh test_directory
			This script will initialize oprofile for the specified test directory
			and will be called by oprofile.py presampling()

		oprofile-deinit.sh
			This script will deinitialize oprofile and write the default opreport
			output to samples/oprofile

		oprofile.py
			The actual modules used by this tool

	lock_stat

	diskstats
		TODO iostat!

